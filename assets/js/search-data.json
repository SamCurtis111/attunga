{
  
    
        "post0": {
            "title": "Weather Data",
            "content": "Temperature Forecasts . Taken from BoM. Dashed line displays yesterdays forecast. Solid line is the most current BoM forecast . . . Forecast Precipitation . . .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/Weather-Data.html",
            "relUrl": "/jupyter/2021/05/24/Weather-Data.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "SRA End of Day Position Report",
            "content": "Report Ran: 25-05-2021 14:00:40 . Section 1 - Current Qtr . 1.1 Attunga Holdings . Location Year Qtr Current Holding VWAP Current SRA Value (p. Unit) Total PnL . 0 NSWQLD | 2021 | Q2 | 54 | 211.17 | 53.16 | -8532.27 | . 1 NSWVIC | 2021 | Q2 | 30 | 873.81 | 1055.45 | 5449.11 | . 2 SAVIC | 2021 | Q2 | 30 | 4431.36 | 1284.24 | -94413.51 | . 3 VICNSW | 2021 | Q2 | 4 | 8004.00 | 5805.32 | -8794.70 | . 4 VICSA | 2021 | Q2 | 25 | 1763.20 | 2276.14 | 12823.52 | . . . Section 2 - Next Qtr . 2.1 Attunga Holdings . Location Year Qtr Current Holding VWAP . 0 NSWQLD | 2021 | Q3 | 32 | 252.75 | . 1 NSWVIC | 2021 | Q3 | 61 | 979.46 | . 2 SAVIC | 2021 | Q3 | 22 | 5246.73 | . 3 VICNSW | 2021 | Q3 | 10 | 4500.00 | . 4 VICSA | 2021 | Q3 | 20 | 2058.75 | . Tranche Settlement Prices . YEAR QTR TRANCHE NSWQLD QLDNSW SAVIC VICSA NSWVIC VICNSW . 0 2021 | Q3 | 01 | $502.00 | $10,228.20 | $9,568.80 | $2,760.00 | $2,208.00 | $5,918.40 | . 1 2021 | Q3 | 02 | $800.00 | $6,003.00 | $6,315.41 | $2,525.00 | $1,975.00 | $5,602.00 | . 2 2021 | Q3 | 03 | $800.00 | $7,729.00 | $6,315.41 | $2,272.50 | $1,656.00 | $5,681.66 | . 3 2021 | Q3 | 04 | $800.00 | $9,001.00 | $9,967.00 | $1,750.00 | $1,650.00 | $5,681.66 | . 4 2021 | Q3 | 05 | $800.00 | $11,542.00 | $9,967.00 | $1,662.50 | $1,650.00 | $6,200.00 | . 5 2021 | Q3 | 06 | $245.00 | $11,542.00 | $10,005.00 | $1,413.12 | $1,656.00 | $5,420.00 | . 6 2021 | Q3 | 07 | $200.00 | $11,772.84 | $10,205.10 | $1,550.00 | $993.60 | $7,500.00 | . 7 2021 | Q3 | 08 | $312.00 | $10,086.00 | $3,571.78 | $1,695.75 | $1,032.00 | $6,601.00 | . 8 2021 | Q3 | 09 | $252.00 | $12,950.12 | $4,504.00 | $1,600.94 | $1,304.00 | $4,500.00 | . 9 2021 | Q3 | 09 | $523.44 | $10,094.91 | $7,824.39 | $1,914.42 | $1,569.40 | $5,906.70 | . 10 2021 | Q3 | 10 | $254.00 | $12,302.50 | $5,250.00 | $1,601.00 | $1,389.00 | $5,625.00 | . Section 3 - Historical SRA Data . 3.1 Historical Payouts . Note: Need to change both the qtr &amp; product dropdowns to get the chart to update . 3.3 Attunga Holdings . all_holdings = df_holding.copy() all_holdings[&#39;yyyyqq&#39;] = all_holdings[&#39;yyyyqq&#39;].astype(int) all_holdings = all_holdings[all_holdings.yyyyqq &gt;= int(str(datetime.today().year) + &#39;0&#39; + current_qtr[-1])] all_holdings = all_holdings.sort_values(by=[&#39;yyyyqq&#39;,&#39;Location&#39;]).reset_index(drop=True) all_holdings . Location Year Qtr Current Holding VWAP yyyyqq . 0 NSWQLD | 2021 | Q2 | 54 | 211.17 | 202102 | . 1 NSWVIC | 2021 | Q2 | 30 | 873.81 | 202102 | . 2 SAVIC | 2021 | Q2 | 30 | 4431.36 | 202102 | . 3 VICNSW | 2021 | Q2 | 4 | 8004.00 | 202102 | . 4 VICSA | 2021 | Q2 | 25 | 1763.20 | 202102 | . 5 NSWQLD | 2021 | Q3 | 32 | 252.75 | 202103 | . 6 NSWVIC | 2021 | Q3 | 61 | 979.46 | 202103 | . 7 SAVIC | 2021 | Q3 | 22 | 5246.73 | 202103 | . 8 VICNSW | 2021 | Q3 | 10 | 4500.00 | 202103 | . 9 VICSA | 2021 | Q3 | 20 | 2058.75 | 202103 | . 10 NSWQLD | 2021 | Q4 | 74 | 795.49 | 202104 | . 11 NSWVIC | 2021 | Q4 | 102 | 1164.16 | 202104 | . 12 SAVIC | 2021 | Q4 | 40 | 5223.92 | 202104 | . 13 VICSA | 2021 | Q4 | 30 | 1994.84 | 202104 | . 14 NSWVIC | 2022 | Q1 | 10 | 4356.00 | 202201 | . 15 SAVIC | 2022 | Q1 | 40 | 5637.44 | 202201 | . 16 VICSA | 2022 | Q1 | 24 | 6148.76 | 202201 | . 17 NSWQLD | 2022 | Q2 | 30 | 337.03 | 202202 | . 18 NSWVIC | 2022 | Q2 | 30 | 826.29 | 202202 | . 19 SAVIC | 2022 | Q2 | 30 | 4022.22 | 202202 | . 20 NSWVIC | 2022 | Q3 | 70 | 854.48 | 202203 | . 21 SAVIC | 2022 | Q3 | 34 | 4834.21 | 202203 | . 22 VICSA | 2022 | Q3 | 20 | 2024.75 | 202203 | . 23 NSWQLD | 2022 | Q4 | 8 | 1254.00 | 202204 | . 24 NSWVIC | 2022 | Q4 | 60 | 772.71 | 202204 | . 25 SAVIC | 2022 | Q4 | 40 | 4988.63 | 202204 | . 26 VICSA | 2022 | Q4 | 10 | 2450.00 | 202204 | . 27 NSWVIC | 2023 | Q1 | 10 | 4320.00 | 202301 | . 28 SAVIC | 2023 | Q1 | 50 | 5665.24 | 202301 | . 29 VICSA | 2023 | Q1 | 20 | 6816.00 | 202301 | . 30 NSWQLD | 2023 | Q2 | 8 | 404.00 | 202302 | . 31 NSWVIC | 2023 | Q2 | 30 | 514.46 | 202302 | . 32 SAVIC | 2023 | Q2 | 30 | 3416.00 | 202302 | . 33 VICSA | 2023 | Q2 | 12 | 1743.17 | 202302 | . 34 NSWQLD | 2023 | Q3 | 10 | 257.00 | 202303 | . 35 NSWVIC | 2023 | Q3 | 90 | 637.55 | 202303 | . 36 SAVIC | 2023 | Q3 | 45 | 4022.38 | 202303 | . 37 VICSA | 2023 | Q3 | 20 | 1667.94 | 202303 | . 38 NSWQLD | 2023 | Q4 | 10 | 1501.00 | 202304 | . 39 NSWVIC | 2023 | Q4 | 60 | 725.17 | 202304 | . 40 SAVIC | 2023 | Q4 | 34 | 4084.00 | 202304 | . 41 VICSA | 2023 | Q4 | 20 | 1840.35 | 202304 | . 42 NSWVIC | 2024 | Q1 | 10 | 4368.00 | 202401 | . 43 SAVIC | 2024 | Q1 | 25 | 5154.00 | 202401 | . 44 VICSA | 2024 | Q1 | 10 | 6115.20 | 202401 | .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/SRA-Position.html",
            "relUrl": "/jupyter/2021/05/24/SRA-Position.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "PASA",
            "content": "MTPASA . Total Availability . . . MTPASA Change . STPASA .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/PASA.html",
            "relUrl": "/jupyter/2021/05/24/PASA.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Option Upload Testing",
            "content": "from sqlalchemy import create_engine engine = create_engine(&#39;postgresql://postgres:iforgot23@localhost/BB_Data&#39;) import pandas as pd import numpy as np from scipy.stats import norm from tqdm import tqdm from calendar import monthrange import collections from datetime import datetime from IPython.display import display_html, HTML . product_dict = {&#39;NSW&#39;:&#39;W&#39;, &#39;QLD&#39;:&#39;Z&#39;, &#39;VIC&#39;:&#39;V&#39;,&#39;SA&#39;:&#39;U&#39;, 1:&#39;H&#39;, 2:&#39;M&#39;, 3:&#39;U&#39;, 4:&#39;Z&#39;, &#39;H&#39;:&#39;01&#39;,&#39;M&#39;:&#39;02&#39;,&#39;U&#39;:&#39;03&#39;,&#39;Z&#39;:&#39;04&#39;, 2016:&#39;16&#39;,2017:&#39;17&#39;,2018:&#39;18&#39;,2019:&#39;19&#39;,2020:&#39;20&#39;,2021:&#39;1&#39;,2022:&#39;2&#39;,2023:&#39;3&#39;,2024:&#39;4&#39;,2025:&#39;5&#39;, &#39;5&#39;:&#39;2015&#39;,&#39;6&#39;:&#39;2016&#39;,&#39;7&#39;:&#39;2017&#39;,&#39;8&#39;:&#39;2018&#39;,&#39;9&#39;:&#39;2019&#39;,&#39;0&#39;:&#39;2020&#39;,&#39;1&#39;:&#39;2021&#39;,&#39;2&#39;:&#39;2022&#39;,&#39;3&#39;:&#39;2023&#39;,&#39;4&#39;:&#39;2024&#39;, &#39;Call&#39;: &#39;C&#39;, &#39;Put&#39;:&#39;P&#39;, &#39;Q&#39;: &#39;E&#39;, &#39;Cal&#39;:&#39;H&#39;, &#39;Fin&#39;:&#39;H&#39;} strip_dict = {&#39;QLD&#39;:&#39;3&#39;, &#39;NSW&#39;:&#39;1&#39;, &#39;VIC&#39;:&#39;2&#39;, &#39;SA&#39;:&#39;4&#39;} qtr_months_dict = {&#39;Q1&#39;:[1,2,3], &#39;Q2&#39;:[4,5,6], &#39;Q3&#39;:[7,8,9], &#39;Q4&#39;:[10,11,12]} exp_map = {&#39;Cal&#39;:[&#39;Q1&#39;,&#39;Q2&#39;,&#39;Q3&#39;,&#39;Q4&#39;], &#39;Fin&#39;:[&#39;Q3&#39;,&#39;Q4&#39;,&#39;Q1&#39;,&#39;Q2&#39;]} . query = &#39;SELECT * FROM &quot;Option_Position &quot;&#39; options_df = pd.read_sql(query, engine) options_df = options_df.iloc[:,1:] options_df[&#39;Strike&#39;] = options_df[&#39;Strike&#39;].astype(int) # Partition df into qtr (or fin/cal) and year cols options_df[&#39;Year&#39;] = [int(d[-4:]) for d in options_df.Date] options_df[&#39;Exp Time&#39;] = [d[:-4] for d in options_df.Date] options_df[&#39;Exp Time&#39;] = options_df[&#39;Exp Time&#39;].str.replace(&#39; &#39;,&#39;&#39;) # remove whitespace # Convert each of the products to their BB code codes = [] for i in range(len(options_df)): if options_df[&#39;Exp Time&#39;][i]==&#39;Cal&#39;: prodtype = product_dict[options_df[&#39;Exp Time&#39;][i]] prodregion = strip_dict[options_df[&#39;Region&#39;][i]] prodq = &#39;Z&#39; elif options_df[&#39;Exp Time&#39;][i] == &#39;Fin&#39;: prodtype = product_dict[options_df[&#39;Exp Time&#39;][i]] prodregion = strip_dict[options_df[&#39;Region&#39;][i]] prodq = &#39;M&#39; else: prodtype = &#39;E&#39; prodregion = product_dict[options_df[&#39;Region&#39;][i]] prodq = product_dict[int(options_df.Date[i][1])] prodyear = product_dict[options_df.Year[i]] code = prodtype + prodregion + prodq + prodyear + product_dict[options_df[&#39;Type&#39;][i]] + &#39; &#39; + str(options_df[&#39;Strike&#39;][i]) + &#39; Comdty&#39; codes.append(code) options_df[&#39;BB_Code&#39;] = codes . query = &#39;SELECT * FROM &quot;Swap_Position &quot;&#39; swap_df = pd.read_sql(query, engine) swap_df = swap_df.iloc[:,1:] . def unique_times_func(subset_df): unique_times = zip(subset_df.Year, subset_df[&#39;Exp Time&#39;]) unique_times = list(set(unique_times)) # Convert fin / cal to their respective qtrs for x,y in unique_times: if y == &#39;Cal&#39;: for q in exp_map[y]: unique_times.append((x, q)) if y == &#39;Fin&#39;: for q in exp_map[y][0:2]: unique_times.append(((x-1), q)) for q in exp_map[y][2:]: unique_times.append((x, q)) # Remove fin / cal from list unique_times = [x for x in unique_times if &quot;Fin&quot; not in x] unique_times = [x for x in unique_times if &quot;Cal&quot; not in x] unique_times = list(set(unique_times)) return unique_times . option_dict = {} for state in options_df.Region.unique(): option_dict[state] = {} # Make a subset of df to filter into df sub_df = options_df[options_df.Region == state] state_times = unique_times_func(sub_df) # Make the qtrly frame subsets by state for dates in state_times: option_dict[state][dates] = {} # Initialise the empty cols to fill option_dict[state][dates][&#39;Description&#39;] = [] option_dict[state][dates][&#39;BB_Code&#39;] = [] option_dict[state][dates][&#39;Exp Time&#39;] = [] option_dict[state][dates][&#39;Quarter Hours&#39;] = [] option_dict[state][dates][&#39;Type&#39;] = [] option_dict[state][dates][&#39;Strike&#39;] = [] option_dict[state][dates][&#39;Cost&#39;] = [] option_dict[state][dates][&#39;Current Underlying&#39;] = [] option_dict[state][dates][&#39;Qty&#39;] = [] option_dict[state][dates][&#39;Option Type&#39;] = [] option_dict[state][dates][&#39;Current Price&#39;] = [] option_dict[state][dates][&#39;Current Vol&#39;] = [] option_dict[state][dates][&#39;Current Delta&#39;] = [] . field_list = [&#39;Description&#39;,&#39;BB_Code&#39;,&#39;Exp Time&#39;,&#39;Type&#39;,&#39;Strike&#39;,&#39;Cost&#39;,&#39;Qty&#39;] for i in range(len(options_df)): state = options_df.Region[i] yr = options_df.Year[i] #sub_df = options_df[options_df.Region==state] #unique_times = unique_times_func(sub_df) if options_df[&#39;Exp Time&#39;][i] == &#39;Cal&#39;: datelist = [] for q in exp_map[&#39;Cal&#39;]: datelist.append((yr, q)) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) elif options_df[&#39;Exp Time&#39;][i] == &#39;Fin&#39;: datelist = [] for q in exp_map[&#39;Fin&#39;][0:2]: datelist.append((yr-1, q)) for q in exp_map[&#39;Fin&#39;][2:]: datelist.append((yr, q)) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) else: #dates = (yr, options_df[&#39;Exp Time&#39;][i]) #for field in field_list: # option_dict[state][dates][field].append(options_df[field][i]) datelist = [] datelist.append((int(yr), str(options_df[&#39;Exp Time&#39;][i]))) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/Option-Upload-Testing.html",
            "relUrl": "/jupyter/2021/05/24/Option-Upload-Testing.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Option Deltas",
            "content": "from IPython.display import display, HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; The raw code for this IPython notebook is by default hidden for easier reading. To toggle on/off the raw code, click &lt;a href=&quot;javascript:code_toggle()&quot;&gt;here&lt;/a&gt;.&#39;&#39;&#39;) . The raw code for this IPython notebook is by default hidden for easier reading. To toggle on/off the raw code, click here. Generate Plots . display(output_state) .",
            "url": "https://samcurtis111.github.io/attunga/2021/05/24/Option-Positions-(In-Progress).html",
            "relUrl": "/2021/05/24/Option-Positions-(In-Progress).html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "NEM Data",
            "content": "Last ran: 2021-05-25 18:48:11 . NEM Price Data . 180it [00:00, 60253.37it/s] . Averaged Daily Prices . Note that current day and 8 day ahead are partial days, do not use these figures for pricing / modelling Click on individual states in chart to add / remove them for closer inspection . REGIONID NSW1 QLD1 SA1 TAS1 VIC1 INTERVAL_DATE 2021-05-25 6355.67 9011.79 26.89 26.84 26.65 2021-05-26 1292.45 3758.67 1042.08 35.24 1044.76 2021-05-27 1203.16 1416.57 1175.29 55.33 1138.28 2021-05-28 2337.88 2167.62 2208.17 1732.39 2188.10 2021-05-29 1114.76 1050.33 1099.83 128.35 1051.69 2021-05-30 1953.86 1910.43 1949.52 290.50 1921.57 2021-05-31 4016.41 3916.41 4824.73 1165.93 4843.32 2021-06-01 3088.98 2929.83 4613.84 640.99 3231.60 2021-06-02 141.49 133.22 4691.53 100.01 98.88 REGIONID RUN_DATETIME INTERVAL_DATE 2021-05-25 2021/05/25 18:00:00 2021-05-26 2021/05/25 18:00:00 2021-05-27 2021/05/25 18:00:00 2021-05-28 2021/05/25 18:00:00 2021-05-29 2021/05/25 18:00:00 2021-05-30 2021/05/25 18:00:00 2021-05-31 2021/05/25 18:00:00 2021-06-01 2021/05/25 18:00:00 2021-06-02 2021/05/25 18:00:00 . . .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/NEM-Data.html",
            "relUrl": "/jupyter/2021/05/24/NEM-Data.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Morning Review",
            "content": "Rough Format . NEM Summary . Spot market summary: . Yest spot prices | PD 7 Day spoot prices | Average 7 day price table (incl. caps) | . | Supply / Demand / Reserve . IC flows / constraints | . | Generation . Fuel mix | By DUID - outages / trips | Bid stacks (some of these might not be worth the work) | . | . ASX Summary . Yesterday biggest movers | .",
            "url": "https://samcurtis111.github.io/attunga/2021/05/24/Daily-Summary-(In-Progress).html",
            "relUrl": "/2021/05/24/Daily-Summary-(In-Progress).html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Annualised Volatilities Report",
            "content": "from pathlib import Path import numpy as np import pandas as pd pd.set_option(&#39;display.max_rows&#39;, None) # prevent dfs from being truncated . data_path = Path(&quot;C:/Users/SamCurtis/AppData/Local/bipy/28095931/projects/02f1bf62483a4d82b93898b71672e018&quot;) / (&quot;tableau_vols.xlsx&quot;) raw_baseload = pd.read_excel(data_path, sheet_name=&#39;Baseload&#39;) raw_caps = pd.read_excel(data_path, sheet_name=&#39;Caps&#39;) raw_strips = pd.read_excel(data_path, sheet_name=&#39;Strips&#39;) last_update_path = Path(&quot;C:/Users/SamCurtis/AppData/Local/bipy/28095931/projects/02f1bf62483a4d82b93898b71672e018&quot;) / (&quot;volatility_data.xlsx&quot;) last_updated = pd.read_excel(last_update_path, sheet_name=&#39;last_updated&#39;) last_updated = last_updated[&#39;updated&#39;][0] . print(&#39;Last Updated: &#39;, last_updated) . Last Updated: 2021-05-24 16:28:30 . Baseload Contracts . baseload_pivot = pd.pivot_table(raw_baseload, index=[&quot;state&quot;, &quot;year&quot;,&quot;quater&quot;]) baseload_pivot = baseload_pivot.iloc[:,1:] baseload_pivot . annual monthly qtrly weekly . state year quater . NSW 2021 2 0.2742 | 0.6735 | 0.4486 | 1.1411 | . 3 0.1926 | 0.1868 | 0.2084 | 0.2258 | . 4 0.1918 | 0.1777 | 0.2008 | 0.2221 | . 2022 1 0.1894 | 0.1289 | 0.2472 | 0.1734 | . 2 0.1654 | 0.1111 | 0.1734 | 0.1505 | . 3 0.1532 | 0.1457 | 0.1537 | 0.0743 | . 4 0.1596 | 0.1409 | 0.1893 | 0.0893 | . 2023 1 0.1663 | 0.1432 | 0.2378 | 0.0852 | . 2 0.1804 | 0.0973 | 0.1669 | 0.0360 | . 3 0.1802 | 0.0936 | 0.1727 | 0.0457 | . 4 0.1608 | 0.1032 | 0.1687 | 0.0464 | . 2024 1 NaN | 0.0944 | 0.1755 | 0.0706 | . 2 NaN | 0.0839 | 0.1434 | 0.0331 | . 3 NaN | 0.0909 | 0.0766 | 0.0000 | . 4 NaN | 0.0907 | 0.0733 | 0.0000 | . 2025 1 NaN | 0.1755 | NaN | 0.0000 | . 2 NaN | 0.0755 | NaN | 0.0000 | . QLD 2021 2 0.2706 | 0.5838 | 0.4044 | 1.0015 | . 3 0.2068 | 0.2576 | 0.2208 | 0.3051 | . 4 0.1962 | 0.1750 | 0.1883 | 0.2184 | . 2022 1 0.1644 | 0.1374 | 0.1959 | 0.1805 | . 2 0.1673 | 0.1986 | 0.2117 | 0.3738 | . 3 0.1527 | 0.1152 | 0.1551 | 0.1665 | . 4 0.1607 | 0.1444 | 0.1843 | 0.2412 | . 2023 1 0.1551 | 0.1084 | 0.1950 | 0.0836 | . 2 0.1712 | 0.0888 | 0.1770 | 0.0691 | . 3 0.1622 | 0.0770 | 0.1661 | 0.0365 | . 4 0.2095 | 0.0771 | 0.1947 | 0.0369 | . 2024 1 NaN | 0.0746 | 0.1506 | 0.0659 | . 2 NaN | 0.0928 | 0.1352 | 0.1424 | . 3 NaN | 0.1506 | 0.1549 | 0.0307 | . 4 NaN | 0.1428 | 0.1643 | 0.0290 | . 2025 1 NaN | 0.7129 | NaN | 0.0234 | . 2 NaN | 0.0967 | NaN | 0.0000 | . SA 2021 2 0.2823 | 0.6309 | 0.4453 | 0.6674 | . 3 0.1738 | 0.2392 | 0.2052 | 0.1322 | . 4 0.1700 | 0.1213 | 0.1748 | 0.0470 | . 2022 1 0.2036 | 0.2047 | 0.2502 | 0.0000 | . 2 0.1693 | 0.1644 | 0.2005 | 0.1151 | . 3 0.1782 | 0.1422 | 0.1707 | 0.0803 | . 4 0.1670 | 0.1373 | 0.1617 | 0.0427 | . 2023 1 0.2024 | 0.2125 | 0.2854 | 0.0536 | . 2 0.2910 | 0.5190 | 0.3824 | 1.0689 | . 3 0.3094 | 0.5006 | 0.3450 | 1.0506 | . 4 0.2312 | 0.0000 | 0.1800 | 0.0000 | . 2024 1 NaN | 0.1671 | 0.2100 | 0.0582 | . 2 NaN | 0.4047 | 0.3668 | 0.8512 | . 3 NaN | 0.0453 | 0.1746 | 0.0000 | . 4 NaN | 0.0452 | 0.2881 | 0.0000 | . 2025 1 NaN | 0.0984 | NaN | 0.0000 | . 2 NaN | 0.0452 | NaN | 0.0000 | . VIC 2021 2 0.3554 | 0.8553 | 0.6030 | 1.4414 | . 3 0.2269 | 0.2464 | 0.2831 | 0.3218 | . 4 0.2302 | 0.1982 | 0.2722 | 0.1677 | . 2022 1 0.2422 | 0.1422 | 0.3079 | 0.1535 | . 2 0.2373 | 0.2279 | 0.3321 | 0.2141 | . 3 0.2233 | 0.2432 | 0.3007 | 0.2659 | . 4 0.2480 | 0.1492 | 0.3729 | 0.1014 | . 2023 1 0.1957 | 0.1213 | 0.2946 | 0.0526 | . 2 0.1684 | 0.1148 | 0.2261 | 0.0232 | . 3 0.1888 | 0.1378 | 0.2459 | 0.0572 | . 4 0.1897 | 0.1449 | 0.2866 | 0.0451 | . 2024 1 NaN | 0.2143 | 0.2638 | 0.1010 | . 2 NaN | 0.1998 | 0.1918 | 0.0928 | . 3 NaN | 0.2965 | 0.2549 | 0.0547 | . 4 NaN | 0.2492 | 0.2262 | 0.0752 | . 2025 1 NaN | 0.4078 | NaN | 0.0000 | . 2 NaN | 0.2371 | NaN | 0.0000 | . Caps . cap_pivot = pd.pivot_table(raw_caps, index=[&quot;state&quot;, &quot;year&quot;,&quot;quater&quot;]) cap_pivot = cap_pivot.iloc[:,1:] cap_pivot . annual monthly qtrly weekly . state year quater . NSW 2021 2 1.2054 | 3.7901 | 2.3224 | 7.3813 | . 3 NaN | 1.0243 | 0.6898 | 1.6127 | . 4 NaN | 0.4527 | NaN | 0.7212 | . 2022 1 NaN | 0.4057 | NaN | 0.4924 | . 2 NaN | 0.3912 | NaN | 0.3909 | . 3 NaN | 0.2564 | NaN | 0.2730 | . 4 NaN | 0.4286 | NaN | 0.3547 | . 2023 1 NaN | 0.3537 | NaN | 0.5520 | . 2 NaN | 0.2082 | NaN | 0.2978 | . 3 NaN | 0.3036 | NaN | 0.6392 | . 4 NaN | 0.0378 | NaN | 0.0000 | . 2024 1 NaN | 0.3593 | NaN | 0.2630 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 2.3025 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . QLD 2021 2 0.9349 | 2.0462 | 1.6725 | 0.8678 | . 3 NaN | 1.1332 | 0.8970 | 1.3198 | . 4 NaN | 0.4247 | NaN | 0.6171 | . 2022 1 NaN | 0.4005 | NaN | 0.3029 | . 2 NaN | 0.3389 | NaN | 0.3872 | . 3 NaN | 0.3055 | NaN | 0.3872 | . 4 NaN | 0.3305 | NaN | 0.3535 | . 2023 1 NaN | 0.5869 | NaN | 0.7170 | . 2 NaN | 0.3215 | NaN | 0.6633 | . 3 NaN | 0.3215 | NaN | 0.6633 | . 4 NaN | 0.3757 | NaN | 0.6605 | . 2024 1 NaN | 0.5796 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . SA 2021 2 1.0552 | 3.3769 | 2.0637 | 4.0641 | . 3 NaN | 0.6955 | 0.6890 | 0.6322 | . 4 NaN | 0.8966 | NaN | 0.0000 | . 2022 1 NaN | 0.4630 | NaN | 0.0000 | . 2 NaN | 0.7722 | NaN | 0.7477 | . 3 NaN | 0.7077 | NaN | 0.1759 | . 4 NaN | 0.5874 | NaN | 0.0000 | . 2023 1 NaN | 0.3033 | NaN | 0.1188 | . 2 NaN | 0.3314 | NaN | 0.6478 | . 3 NaN | 0.3314 | NaN | 0.6478 | . 4 NaN | 0.1118 | NaN | 0.2353 | . 2024 1 NaN | 0.2705 | NaN | 0.0000 | . 2 NaN | 0.2481 | NaN | 0.5221 | . 3 NaN | 0.2481 | NaN | 0.5221 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 0.3231 | NaN | 0.6800 | . 2 NaN | 0.0000 | NaN | 0.0000 | . VIC 2021 2 1.5344 | 5.0660 | 3.0350 | 7.0705 | . 3 NaN | 1.4850 | 1.0102 | 0.8635 | . 4 NaN | 0.4039 | NaN | 0.3230 | . 2022 1 NaN | 0.3663 | NaN | 0.4126 | . 2 NaN | 0.8142 | NaN | 1.3611 | . 3 NaN | 0.6524 | NaN | 0.5821 | . 4 NaN | 0.2866 | NaN | 0.4393 | . 2023 1 NaN | 0.2669 | NaN | 0.3200 | . 2 NaN | 0.5916 | NaN | 1.0939 | . 3 NaN | 0.3004 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2024 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . Strips . strips_pivot = pd.pivot_table(raw_strips, index=[&quot;state&quot;, &quot;year&quot;,&quot;prod_type&quot;]) strips_pivot = strips_pivot.iloc[:,1:] strips_pivot . annual monthly qtrly quater weekly . state year prod_type . NSW 2022 Cal 0.1439 | 0.1224 | 0.1675 | 4 | 0.1176 | . Fin 0.1634 | 0.1462 | 0.1882 | 2 | 0.1998 | . 2023 Cal 0.1501 | 0.1003 | 0.1677 | 4 | 0.0382 | . Fin 0.1338 | 0.1226 | 0.1665 | 2 | 0.0667 | . 2024 Cal NaN | 0.0707 | 0.0957 | 4 | 0.0284 | . Fin NaN | 0.0792 | 0.1406 | 2 | 0.0410 | . 2025 Fin NaN | 0.0857 | NaN | 2 | 0.0000 | . QLD 2022 Cal 0.1425 | 0.1191 | 0.1672 | 4 | 0.1762 | . Fin 0.1604 | 0.1476 | 0.1790 | 2 | 0.1972 | . 2023 Cal 0.1538 | 0.0859 | 0.1780 | 4 | 0.0564 | . Fin 0.1402 | 0.0954 | 0.1650 | 2 | 0.1049 | . 2024 Cal NaN | 0.1020 | 0.1412 | 4 | 0.0550 | . Fin NaN | 0.0636 | 0.1409 | 2 | 0.0605 | . SA 2022 Cal 0.1462 | 0.1475 | 0.1764 | 4 | 0.0508 | . Fin 0.1390 | 0.1360 | 0.1713 | 2 | 0.0657 | . 2023 Cal 0.2133 | 0.2240 | 0.2347 | 4 | 0.4437 | . Fin 0.1529 | 0.1463 | 0.1941 | 2 | 0.2348 | . 2024 Cal NaN | 0.0938 | 0.2262 | 4 | 0.1648 | . Fin NaN | 0.1962 | 0.2198 | 2 | 0.3995 | . 2025 Fin NaN | 0.0499 | NaN | 2 | 0.0000 | . VIC 2022 Cal 0.2037 | 0.1842 | 0.2790 | 4 | 0.1380 | . Fin 0.2111 | 0.2171 | 0.2745 | 2 | 0.1932 | . 2023 Cal 0.1625 | 0.1018 | 0.2437 | 4 | 0.0297 | . Fin 0.1653 | 0.1208 | 0.2388 | 2 | 0.0546 | . 2024 Cal NaN | 0.1806 | 0.2024 | 4 | 0.0736 | . Fin NaN | 0.1568 | 0.2107 | 2 | 0.0694 | . 2025 Fin NaN | 0.2718 | NaN | 2 | 0.0917 | .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/05/24/Annualised-Volatilities.html",
            "relUrl": "/jupyter/2021/05/24/Annualised-Volatilities.html",
            "date": " • May 24, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samcurtis111.github.io/attunga/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://samcurtis111.github.io/attunga/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samcurtis111.github.io/attunga/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}