{
  
    
        "post0": {
            "title": "Weather Data",
            "content": "Temperature Forecasts . Taken from BoM. Dashed line displays yesterdays forecast. Solid line is the most current BoM forecast . . . Forecast Precipitation . . .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/Weather-Data.html",
            "relUrl": "/jupyter/2021/06/05/Weather-Data.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "SRA End of Day Position Report",
            "content": "Report Ran: 06-06-2021 14:00:39 . Section 1 - Current Qtr . 1.1 Attunga Holdings . Location Year Qtr Current Holding VWAP Current SRA Value (p. Unit) Total PnL . 0 NSWQLD | 2021 | Q2 | 54 | 211.17 | 16863.35 | 899217.79 | . 1 NSWVIC | 2021 | Q2 | 30 | 873.81 | 1113.21 | 7181.91 | . 2 SAVIC | 2021 | Q2 | 30 | 4431.36 | 1773.45 | -79737.25 | . 3 VICNSW | 2021 | Q2 | 4 | 8004.00 | 21189.43 | 52741.73 | . 4 VICSA | 2021 | Q2 | 25 | 1763.20 | 2841.26 | 26951.51 | . . . Section 2 - Next Qtr . 2.1 Attunga Holdings . Location Year Qtr Current Holding VWAP . 0 NSWQLD | 2021 | Q3 | 32 | 252.75 | . 1 NSWVIC | 2021 | Q3 | 61 | 979.46 | . 2 SAVIC | 2021 | Q3 | 22 | 5246.73 | . 3 VICNSW | 2021 | Q3 | 10 | 4500.00 | . 4 VICSA | 2021 | Q3 | 20 | 2058.75 | . Tranche Settlement Prices . YEAR QTR TRANCHE NSWQLD QLDNSW SAVIC VICSA NSWVIC VICNSW . 0 2021 | Q3 | 01 | $502.00 | $10,228.20 | $9,568.80 | $2,760.00 | $2,208.00 | $5,918.40 | . 1 2021 | Q3 | 02 | $800.00 | $6,003.00 | $6,315.41 | $2,525.00 | $1,975.00 | $5,602.00 | . 2 2021 | Q3 | 03 | $800.00 | $7,729.00 | $6,315.41 | $2,272.50 | $1,656.00 | $5,681.66 | . 3 2021 | Q3 | 04 | $800.00 | $9,001.00 | $9,967.00 | $1,750.00 | $1,650.00 | $5,681.66 | . 4 2021 | Q3 | 05 | $800.00 | $11,542.00 | $9,967.00 | $1,662.50 | $1,650.00 | $6,200.00 | . 5 2021 | Q3 | 06 | $245.00 | $11,542.00 | $10,005.00 | $1,413.12 | $1,656.00 | $5,420.00 | . 6 2021 | Q3 | 07 | $200.00 | $11,772.84 | $10,205.10 | $1,550.00 | $993.60 | $7,500.00 | . 7 2021 | Q3 | 08 | $312.00 | $10,086.00 | $3,571.78 | $1,695.75 | $1,032.00 | $6,601.00 | . 8 2021 | Q3 | 09 | $252.00 | $12,950.12 | $4,504.00 | $1,600.94 | $1,304.00 | $4,500.00 | . 9 2021 | Q3 | 09 | $523.44 | $10,094.91 | $7,824.39 | $1,914.42 | $1,569.40 | $5,906.70 | . 10 2021 | Q3 | 10 | $254.00 | $12,302.50 | $5,250.00 | $1,601.00 | $1,389.00 | $5,625.00 | . Section 3 - Historical SRA Data . 3.1 Historical Payouts . Note: Need to change both the qtr &amp; product dropdowns to get the chart to update . 3.3 Attunga Holdings . all_holdings = df_holding.copy() all_holdings[&#39;yyyyqq&#39;] = all_holdings[&#39;yyyyqq&#39;].astype(int) all_holdings = all_holdings[all_holdings.yyyyqq &gt;= int(str(datetime.today().year) + &#39;0&#39; + current_qtr[-1])] all_holdings = all_holdings.sort_values(by=[&#39;yyyyqq&#39;,&#39;Location&#39;]).reset_index(drop=True) all_holdings . Location Year Qtr Current Holding VWAP yyyyqq . 0 NSWQLD | 2021 | Q2 | 54 | 211.17 | 202102 | . 1 NSWVIC | 2021 | Q2 | 30 | 873.81 | 202102 | . 2 SAVIC | 2021 | Q2 | 30 | 4431.36 | 202102 | . 3 VICNSW | 2021 | Q2 | 4 | 8004.00 | 202102 | . 4 VICSA | 2021 | Q2 | 25 | 1763.20 | 202102 | . 5 NSWQLD | 2021 | Q3 | 32 | 252.75 | 202103 | . 6 NSWVIC | 2021 | Q3 | 61 | 979.46 | 202103 | . 7 SAVIC | 2021 | Q3 | 22 | 5246.73 | 202103 | . 8 VICNSW | 2021 | Q3 | 10 | 4500.00 | 202103 | . 9 VICSA | 2021 | Q3 | 20 | 2058.75 | 202103 | . 10 NSWQLD | 2021 | Q4 | 74 | 795.49 | 202104 | . 11 NSWVIC | 2021 | Q4 | 102 | 1164.16 | 202104 | . 12 SAVIC | 2021 | Q4 | 40 | 5223.92 | 202104 | . 13 VICSA | 2021 | Q4 | 30 | 1994.84 | 202104 | . 14 NSWVIC | 2022 | Q1 | 10 | 4356.00 | 202201 | . 15 SAVIC | 2022 | Q1 | 40 | 5637.44 | 202201 | . 16 VICSA | 2022 | Q1 | 24 | 6148.76 | 202201 | . 17 NSWQLD | 2022 | Q2 | 30 | 337.03 | 202202 | . 18 NSWVIC | 2022 | Q2 | 30 | 826.29 | 202202 | . 19 SAVIC | 2022 | Q2 | 30 | 4022.22 | 202202 | . 20 NSWVIC | 2022 | Q3 | 70 | 854.48 | 202203 | . 21 SAVIC | 2022 | Q3 | 34 | 4834.21 | 202203 | . 22 VICSA | 2022 | Q3 | 20 | 2024.75 | 202203 | . 23 NSWQLD | 2022 | Q4 | 8 | 1254.00 | 202204 | . 24 NSWVIC | 2022 | Q4 | 60 | 772.71 | 202204 | . 25 SAVIC | 2022 | Q4 | 40 | 4988.63 | 202204 | . 26 VICSA | 2022 | Q4 | 10 | 2450.00 | 202204 | . 27 NSWVIC | 2023 | Q1 | 10 | 4320.00 | 202301 | . 28 SAVIC | 2023 | Q1 | 50 | 5665.24 | 202301 | . 29 VICSA | 2023 | Q1 | 20 | 6816.00 | 202301 | . 30 NSWQLD | 2023 | Q2 | 8 | 404.00 | 202302 | . 31 NSWVIC | 2023 | Q2 | 30 | 514.46 | 202302 | . 32 SAVIC | 2023 | Q2 | 30 | 3416.00 | 202302 | . 33 VICSA | 2023 | Q2 | 12 | 1743.17 | 202302 | . 34 NSWQLD | 2023 | Q3 | 10 | 257.00 | 202303 | . 35 NSWVIC | 2023 | Q3 | 90 | 637.55 | 202303 | . 36 SAVIC | 2023 | Q3 | 45 | 4022.38 | 202303 | . 37 VICSA | 2023 | Q3 | 20 | 1667.94 | 202303 | . 38 NSWQLD | 2023 | Q4 | 10 | 1501.00 | 202304 | . 39 NSWVIC | 2023 | Q4 | 60 | 725.17 | 202304 | . 40 SAVIC | 2023 | Q4 | 34 | 4084.00 | 202304 | . 41 VICSA | 2023 | Q4 | 20 | 1840.35 | 202304 | . 42 NSWVIC | 2024 | Q1 | 10 | 4368.00 | 202401 | . 43 SAVIC | 2024 | Q1 | 25 | 5154.00 | 202401 | . 44 VICSA | 2024 | Q1 | 10 | 6115.20 | 202401 | .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/SRA-Position.html",
            "relUrl": "/jupyter/2021/06/05/SRA-Position.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "PASA",
            "content": "MTPASA . Total Availability . . . MTPASA Change . STPASA .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/PASA.html",
            "relUrl": "/jupyter/2021/06/05/PASA.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Option Upload Testing",
            "content": "from sqlalchemy import create_engine engine = create_engine(&#39;postgresql://postgres:iforgot23@localhost/BB_Data&#39;) import pandas as pd import numpy as np from scipy.stats import norm from tqdm import tqdm from calendar import monthrange import collections from datetime import datetime from IPython.display import display_html, HTML . product_dict = {&#39;NSW&#39;:&#39;W&#39;, &#39;QLD&#39;:&#39;Z&#39;, &#39;VIC&#39;:&#39;V&#39;,&#39;SA&#39;:&#39;U&#39;, 1:&#39;H&#39;, 2:&#39;M&#39;, 3:&#39;U&#39;, 4:&#39;Z&#39;, &#39;H&#39;:&#39;01&#39;,&#39;M&#39;:&#39;02&#39;,&#39;U&#39;:&#39;03&#39;,&#39;Z&#39;:&#39;04&#39;, 2016:&#39;16&#39;,2017:&#39;17&#39;,2018:&#39;18&#39;,2019:&#39;19&#39;,2020:&#39;20&#39;,2021:&#39;1&#39;,2022:&#39;2&#39;,2023:&#39;3&#39;,2024:&#39;4&#39;,2025:&#39;5&#39;, &#39;5&#39;:&#39;2015&#39;,&#39;6&#39;:&#39;2016&#39;,&#39;7&#39;:&#39;2017&#39;,&#39;8&#39;:&#39;2018&#39;,&#39;9&#39;:&#39;2019&#39;,&#39;0&#39;:&#39;2020&#39;,&#39;1&#39;:&#39;2021&#39;,&#39;2&#39;:&#39;2022&#39;,&#39;3&#39;:&#39;2023&#39;,&#39;4&#39;:&#39;2024&#39;, &#39;Call&#39;: &#39;C&#39;, &#39;Put&#39;:&#39;P&#39;, &#39;Q&#39;: &#39;E&#39;, &#39;Cal&#39;:&#39;H&#39;, &#39;Fin&#39;:&#39;H&#39;} strip_dict = {&#39;QLD&#39;:&#39;3&#39;, &#39;NSW&#39;:&#39;1&#39;, &#39;VIC&#39;:&#39;2&#39;, &#39;SA&#39;:&#39;4&#39;} qtr_months_dict = {&#39;Q1&#39;:[1,2,3], &#39;Q2&#39;:[4,5,6], &#39;Q3&#39;:[7,8,9], &#39;Q4&#39;:[10,11,12]} exp_map = {&#39;Cal&#39;:[&#39;Q1&#39;,&#39;Q2&#39;,&#39;Q3&#39;,&#39;Q4&#39;], &#39;Fin&#39;:[&#39;Q3&#39;,&#39;Q4&#39;,&#39;Q1&#39;,&#39;Q2&#39;]} . query = &#39;SELECT * FROM &quot;Option_Position &quot;&#39; options_df = pd.read_sql(query, engine) options_df = options_df.iloc[:,1:] options_df[&#39;Strike&#39;] = options_df[&#39;Strike&#39;].astype(int) # Partition df into qtr (or fin/cal) and year cols options_df[&#39;Year&#39;] = [int(d[-4:]) for d in options_df.Date] options_df[&#39;Exp Time&#39;] = [d[:-4] for d in options_df.Date] options_df[&#39;Exp Time&#39;] = options_df[&#39;Exp Time&#39;].str.replace(&#39; &#39;,&#39;&#39;) # remove whitespace # Convert each of the products to their BB code codes = [] for i in range(len(options_df)): if options_df[&#39;Exp Time&#39;][i]==&#39;Cal&#39;: prodtype = product_dict[options_df[&#39;Exp Time&#39;][i]] prodregion = strip_dict[options_df[&#39;Region&#39;][i]] prodq = &#39;Z&#39; elif options_df[&#39;Exp Time&#39;][i] == &#39;Fin&#39;: prodtype = product_dict[options_df[&#39;Exp Time&#39;][i]] prodregion = strip_dict[options_df[&#39;Region&#39;][i]] prodq = &#39;M&#39; else: prodtype = &#39;E&#39; prodregion = product_dict[options_df[&#39;Region&#39;][i]] prodq = product_dict[int(options_df.Date[i][1])] prodyear = product_dict[options_df.Year[i]] code = prodtype + prodregion + prodq + prodyear + product_dict[options_df[&#39;Type&#39;][i]] + &#39; &#39; + str(options_df[&#39;Strike&#39;][i]) + &#39; Comdty&#39; codes.append(code) options_df[&#39;BB_Code&#39;] = codes . query = &#39;SELECT * FROM &quot;Swap_Position &quot;&#39; swap_df = pd.read_sql(query, engine) swap_df = swap_df.iloc[:,1:] . def unique_times_func(subset_df): unique_times = zip(subset_df.Year, subset_df[&#39;Exp Time&#39;]) unique_times = list(set(unique_times)) # Convert fin / cal to their respective qtrs for x,y in unique_times: if y == &#39;Cal&#39;: for q in exp_map[y]: unique_times.append((x, q)) if y == &#39;Fin&#39;: for q in exp_map[y][0:2]: unique_times.append(((x-1), q)) for q in exp_map[y][2:]: unique_times.append((x, q)) # Remove fin / cal from list unique_times = [x for x in unique_times if &quot;Fin&quot; not in x] unique_times = [x for x in unique_times if &quot;Cal&quot; not in x] unique_times = list(set(unique_times)) return unique_times . option_dict = {} for state in options_df.Region.unique(): option_dict[state] = {} # Make a subset of df to filter into df sub_df = options_df[options_df.Region == state] state_times = unique_times_func(sub_df) # Make the qtrly frame subsets by state for dates in state_times: option_dict[state][dates] = {} # Initialise the empty cols to fill option_dict[state][dates][&#39;Description&#39;] = [] option_dict[state][dates][&#39;BB_Code&#39;] = [] option_dict[state][dates][&#39;Exp Time&#39;] = [] option_dict[state][dates][&#39;Quarter Hours&#39;] = [] option_dict[state][dates][&#39;Type&#39;] = [] option_dict[state][dates][&#39;Strike&#39;] = [] option_dict[state][dates][&#39;Cost&#39;] = [] option_dict[state][dates][&#39;Current Underlying&#39;] = [] option_dict[state][dates][&#39;Qty&#39;] = [] option_dict[state][dates][&#39;Option Type&#39;] = [] option_dict[state][dates][&#39;Current Price&#39;] = [] option_dict[state][dates][&#39;Current Vol&#39;] = [] option_dict[state][dates][&#39;Current Delta&#39;] = [] . field_list = [&#39;Description&#39;,&#39;BB_Code&#39;,&#39;Exp Time&#39;,&#39;Type&#39;,&#39;Strike&#39;,&#39;Cost&#39;,&#39;Qty&#39;] for i in range(len(options_df)): state = options_df.Region[i] yr = options_df.Year[i] #sub_df = options_df[options_df.Region==state] #unique_times = unique_times_func(sub_df) if options_df[&#39;Exp Time&#39;][i] == &#39;Cal&#39;: datelist = [] for q in exp_map[&#39;Cal&#39;]: datelist.append((yr, q)) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) elif options_df[&#39;Exp Time&#39;][i] == &#39;Fin&#39;: datelist = [] for q in exp_map[&#39;Fin&#39;][0:2]: datelist.append((yr-1, q)) for q in exp_map[&#39;Fin&#39;][2:]: datelist.append((yr, q)) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) else: #dates = (yr, options_df[&#39;Exp Time&#39;][i]) #for field in field_list: # option_dict[state][dates][field].append(options_df[field][i]) datelist = [] datelist.append((int(yr), str(options_df[&#39;Exp Time&#39;][i]))) for dates in datelist: for field in field_list: option_dict[state][dates][field].append(options_df[field][i]) .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/Option-Upload-Testing.html",
            "relUrl": "/jupyter/2021/06/05/Option-Upload-Testing.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Option Deltas",
            "content": "from IPython.display import display, HTML HTML(&#39;&#39;&#39;&lt;script&gt; code_show=true; function code_toggle() { if (code_show){ $(&#39;div.input&#39;).hide(); } else { $(&#39;div.input&#39;).show(); } code_show = !code_show } $( document ).ready(code_toggle); &lt;/script&gt; The raw code for this IPython notebook is by default hidden for easier reading. To toggle on/off the raw code, click &lt;a href=&quot;javascript:code_toggle()&quot;&gt;here&lt;/a&gt;.&#39;&#39;&#39;) . The raw code for this IPython notebook is by default hidden for easier reading. To toggle on/off the raw code, click here. Generate Plots . from ipywidgets import interactive . w = interactive(plot_generator, state=list(option_dict.keys())) w.to_html(&#39;test_in&#39;) display(w) . New try as go . fig=go.FigureWidget() @interact(state=list(option_dict.keys())) def update(state=&#39;QLD&#39;): fig=plot_generator(state)#.show() #fig.write_html(&#39;{}_figure.html&#39;.format(state), auto_open=True) fig.show() . QLD Pos . q=plot_generator(&#39;QLD&#39;) q.write_html(&#39;QLD_options.html&#39;) q.show() . NSW Pos . n=plot_generator(&#39;NSW&#39;) n.write_html(&#39;NSW_options.html&#39;) n.show() . VIC Pos . v=plot_generator(&#39;VIC&#39;) v.write_html(&#39;VIC_options.html&#39;) v.show() . 2+2 . 4 . fig = go.Figure() import dash import dash_core_components as dcc import dash_html_components as html app = dash.Dash() app.layout = html.Div([ dcc.Dropdown( id=&#39;state-dropdown&#39;, options=[ {&#39;label&#39;: &#39;QLD&#39;, &#39;value&#39;: &#39;QLD&#39;}, {&#39;label&#39;: &#39;NSW&#39;, &#39;value&#39;: &#39;NSW&#39;}, {&#39;label&#39;: &#39;VIC&#39;, &#39;value&#39;: &#39;VIC&#39;} ], value=&#39;QLD&#39; ), html.Div([ dcc.Graph(figure=fig, id=&#39;opt_graph&#39;)]) ]) @app.callback( dash.dependencies.Output(&#39;opt_graph&#39;, &#39;figure&#39;), [dash.dependencies.Input(&#39;state-dropdown&#39;, &#39;value&#39;)]) def plot_generator(value): #, option_dict): deltas = new_delta_dict(option_dict) # generate a fresh delta dict for the respective region state_dict = deltas[value].copy() state_dict = collections.OrderedDict(sorted(state_dict.items())) state_dfs = total_dfs(state_dict) # get the count of total dataframes in dict (nested) state_plots = {} for dates in list(state_dict): for option_type in state_dict[dates]: plotname = str(dates[0]) + &#39; &#39; + str(dates[1]) + &#39; &#39; + option_type sub_df = state_dict[dates][option_type] ## Rename the tuples in the columns ## newcols = list(sub_df)[:-2] newcols = [&#39;{}_{}&#39;.format(x[0],x[1]) for x in newcols] keepcols = list(sub_df)[-2:] colnames = newcols + keepcols sub_df.columns = colnames # Generate the plot state_plots[plotname] = px.line(sub_df) # Generate the figures fig = make_subplots(rows = len(state_plots), cols=1, subplot_titles=list(state_plots)) for i, plotname in enumerate(list(state_plots)): for dat in state_plots[plotname].data: fig.add_trace((go.Scatter(x=dat[&#39;x&#39;], y=dat[&#39;y&#39;], name=dat[&#39;name&#39;])), row=i+1, col=1) # Obtain vline from underlying_dict vline_date = (int(plotname[:4]), str(plotname[5:7])) if &#39;American&#39; in plotname: vline_type = &#39;American&#39; elif &#39;European&#39; in plotname: vline_type = &#39;European&#39; else: print(&#39;Option Type Error&#39;) # Obtain underlying and add to figure fig.add_vline(x=underlying_dict[state][vline_date][vline_type], line_width=2, line_dash=&quot;dash&quot;, row=i+1, col=1) fig.layout.template=None fig.update_layout(height=(state_dfs*100), width=800, title=(&quot;{} Option Payoff Diagrams&quot;.format(state))) return fig app.run_server(debug=True, use_reloader=False) . Dash is running on http://127.0.0.1:8050/ Dash is running on http://127.0.0.1:8050/ Dash is running on http://127.0.0.1:8050/ Warning: This is a development server. Do not use app.run_server Warning: This is a development server. Do not use app.run_server Warning: This is a development server. Do not use app.run_server in production, use a production WSGI server like gunicorn instead. in production, use a production WSGI server like gunicorn instead. in production, use a production WSGI server like gunicorn instead. * Serving Flask app &#34;__main__&#34; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on .",
            "url": "https://samcurtis111.github.io/attunga/2021/06/05/Option-Positions-(In-Progress).html",
            "relUrl": "/2021/06/05/Option-Positions-(In-Progress).html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "NEM Data",
            "content": "Last ran: 2021-06-06 12:48:10 . NEM Price Data . 181it [00:00, 61006.83it/s] . Averaged Daily Prices . Note that current day and 8 day ahead are partial days, do not use these figures for pricing / modelling Click on individual states in chart to add / remove them for closer inspection . REGIONID NSW1 QLD1 SA1 TAS1 VIC1 RUN_DATETIME INTERVAL_DATE 2021-06-06 1566.99 1717.83 33.55 31.22 29.60 2021/06/06 13:00:00 2021-06-07 480.94 775.92 -219.59 3.32 -18.18 2021/06/06 13:00:00 2021-06-08 3089.53 3201.16 2906.66 38.00 2927.54 2021/06/06 13:00:00 2021-06-09 3435.27 3546.60 2929.33 21.71 1115.39 2021/06/06 13:00:00 2021-06-10 4323.42 4644.84 3738.48 30.30 2426.21 2021/06/06 13:00:00 2021-06-11 4881.22 5148.69 7262.98 398.26 4427.00 2021/06/06 13:00:00 2021-06-12 1357.73 1408.33 1774.02 151.98 1184.82 2021/06/06 13:00:00 2021-06-13 1019.77 1025.69 915.54 139.84 834.98 2021/06/06 13:00:00 2021-06-14 74.20 77.49 71.55 64.39 64.16 2021/06/06 13:00:00 . . .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/NEM-Data.html",
            "relUrl": "/jupyter/2021/06/05/NEM-Data.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Morning Review",
            "content": "Rough Format . NEM Summary . Spot market summary: . Yest spot prices | PD 7 Day spoot prices | Average 7 day price table (incl. caps) | . | Supply / Demand / Reserve . IC flows / constraints | . | Generation . Fuel mix | By DUID - outages / trips | Bid stacks (some of these might not be worth the work) | . | . ASX Summary . Yesterday biggest movers | .",
            "url": "https://samcurtis111.github.io/attunga/2021/06/05/Daily-Summary-(In-Progress).html",
            "relUrl": "/2021/06/05/Daily-Summary-(In-Progress).html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "Annualised Volatilities Report",
            "content": "from pathlib import Path import numpy as np import pandas as pd pd.set_option(&#39;display.max_rows&#39;, None) # prevent dfs from being truncated . data_path = Path(&quot;C:/Users/SamCurtis/AppData/Local/bipy/28095931/projects/02f1bf62483a4d82b93898b71672e018&quot;) / (&quot;tableau_vols.xlsx&quot;) raw_baseload = pd.read_excel(data_path, sheet_name=&#39;Baseload&#39;) raw_caps = pd.read_excel(data_path, sheet_name=&#39;Caps&#39;) raw_strips = pd.read_excel(data_path, sheet_name=&#39;Strips&#39;) last_update_path = Path(&quot;C:/Users/SamCurtis/AppData/Local/bipy/28095931/projects/02f1bf62483a4d82b93898b71672e018&quot;) / (&quot;volatility_data.xlsx&quot;) last_updated = pd.read_excel(last_update_path, sheet_name=&#39;last_updated&#39;) last_updated = last_updated[&#39;updated&#39;][0] . print(&#39;Last Updated: &#39;, last_updated) . Last Updated: 2021-06-02 10:17:53 . Baseload Contracts . baseload_pivot = pd.pivot_table(raw_baseload, index=[&quot;state&quot;, &quot;year&quot;,&quot;quater&quot;]) baseload_pivot = baseload_pivot.iloc[:,1:] baseload_pivot . annual monthly qtrly weekly . state year quater . NSW 2021 2 0.3183 | 0.8198 | 0.5456 | 1.1557 | . 3 0.2027 | 0.2730 | 0.2393 | 0.4931 | . 4 0.2031 | 0.2931 | 0.2383 | 0.5390 | . 2022 1 0.1910 | 0.1395 | 0.2442 | 0.1913 | . 2 0.1696 | 0.1625 | 0.1858 | 0.2873 | . 3 0.1550 | 0.1443 | 0.1554 | 0.1748 | . 4 0.1610 | 0.1386 | 0.1907 | 0.1788 | . 2023 1 0.1682 | 0.1533 | 0.2263 | 0.1889 | . 2 0.1825 | 0.1240 | 0.1727 | 0.2014 | . 3 0.1821 | 0.1216 | 0.1741 | 0.2046 | . 4 0.1628 | 0.1185 | 0.1684 | 0.1964 | . 2024 1 NaN | 0.1190 | 0.1811 | 0.2159 | . 2 NaN | 0.0760 | 0.1421 | 0.0864 | . 3 NaN | 0.0951 | 0.0808 | 0.1025 | . 4 NaN | 0.0836 | 0.0733 | 0.0000 | . 2025 1 NaN | 0.1755 | NaN | 0.0000 | . 2 NaN | 0.0755 | NaN | 0.0000 | . QLD 2021 2 0.3681 | 0.9547 | 0.6287 | 1.6844 | . 3 0.2559 | 0.5563 | 0.3685 | 1.1535 | . 4 0.2049 | 0.2464 | 0.2189 | 0.4479 | . 2022 1 0.1757 | 0.2321 | 0.2225 | 0.4185 | . 2 0.1759 | 0.2587 | 0.2314 | 0.3733 | . 3 0.1616 | 0.1990 | 0.1857 | 0.3736 | . 4 0.1687 | 0.2145 | 0.2094 | 0.3741 | . 2023 1 0.1592 | 0.1551 | 0.2080 | 0.3132 | . 2 0.1689 | 0.1503 | 0.1905 | 0.2900 | . 3 0.1611 | 0.1717 | 0.1885 | 0.3561 | . 4 0.2141 | 0.1615 | 0.2115 | 0.3364 | . 2024 1 NaN | 0.0730 | 0.1511 | 0.0668 | . 2 NaN | 0.0926 | 0.1358 | 0.0664 | . 3 NaN | 0.1453 | 0.1542 | 0.0000 | . 4 NaN | 0.1375 | 0.1635 | 0.0000 | . 2025 1 NaN | 0.7137 | NaN | 0.0000 | . 2 NaN | 0.0967 | NaN | 0.0000 | . SA 2021 2 0.2868 | 0.6359 | 0.4615 | 0.5045 | . 3 0.1774 | 0.2604 | 0.2225 | 0.3580 | . 4 0.1687 | 0.1144 | 0.1699 | 0.0393 | . 2022 1 0.2041 | 0.2044 | 0.2414 | 0.0887 | . 2 0.1694 | 0.1640 | 0.1992 | 0.0409 | . 3 0.1783 | 0.1409 | 0.1692 | 0.0275 | . 4 0.1671 | 0.1369 | 0.1603 | 0.0272 | . 2023 1 0.2025 | 0.2121 | 0.2790 | 0.0267 | . 2 0.2911 | 0.5186 | 0.3824 | 0.0266 | . 3 0.3108 | 0.5055 | 0.3492 | 0.1909 | . 4 0.2331 | 0.0927 | 0.1891 | 0.1902 | . 2024 1 NaN | 0.1718 | 0.1970 | 0.1203 | . 2 NaN | 0.4251 | 0.3597 | 0.3022 | . 3 NaN | 0.0453 | 0.1538 | 0.0000 | . 4 NaN | 0.0452 | 0.2772 | 0.0000 | . 2025 1 NaN | 0.0984 | NaN | 0.0000 | . 2 NaN | 0.0452 | NaN | 0.0000 | . VIC 2021 2 0.3640 | 0.8184 | 0.6185 | 0.6376 | . 3 0.2292 | 0.2483 | 0.2837 | 0.2750 | . 4 0.2322 | 0.1962 | 0.2737 | 0.2476 | . 2022 1 0.2428 | 0.1530 | 0.3023 | 0.1672 | . 2 0.2393 | 0.2176 | 0.3344 | 0.2557 | . 3 0.2258 | 0.2037 | 0.3022 | 0.2587 | . 4 0.2484 | 0.1444 | 0.3734 | 0.1166 | . 2023 1 0.1967 | 0.1257 | 0.2785 | 0.1531 | . 2 0.1696 | 0.1200 | 0.2297 | 0.1608 | . 3 0.1896 | 0.1204 | 0.2477 | 0.1240 | . 4 0.1906 | 0.1195 | 0.2871 | 0.1420 | . 2024 1 NaN | 0.1194 | 0.2599 | 0.0785 | . 2 NaN | 0.1545 | 0.1955 | 0.1322 | . 3 NaN | 0.2719 | 0.2556 | 0.0631 | . 4 NaN | 0.2434 | 0.2265 | 0.0353 | . 2025 1 NaN | 0.3814 | NaN | 0.0000 | . 2 NaN | 0.2371 | NaN | 0.0000 | . Caps . cap_pivot = pd.pivot_table(raw_caps, index=[&quot;state&quot;, &quot;year&quot;,&quot;quater&quot;]) cap_pivot = cap_pivot.iloc[:,1:] cap_pivot . annual monthly qtrly weekly . state year quater . NSW 2021 2 1.2677 | 3.8731 | 2.4494 | 2.8816 | . 3 NaN | 1.1141 | 0.7400 | 1.0492 | . 4 NaN | 0.4597 | NaN | 0.4935 | . 2022 1 NaN | 0.4091 | NaN | 0.3786 | . 2 NaN | 0.4670 | NaN | 0.7364 | . 3 NaN | 0.5760 | NaN | 1.0268 | . 4 NaN | 0.3976 | NaN | 0.7590 | . 2023 1 NaN | 0.3853 | NaN | 0.5166 | . 2 NaN | 0.3855 | NaN | 0.7497 | . 3 NaN | 0.3324 | NaN | 0.3078 | . 4 NaN | 0.0378 | NaN | 0.0000 | . 2024 1 NaN | 0.3531 | NaN | 0.0867 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 2.3025 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . QLD 2021 2 1.2292 | 3.0893 | 2.2779 | 5.1332 | . 3 NaN | 2.0386 | 1.3246 | 3.7988 | . 4 NaN | 0.4006 | NaN | 0.2846 | . 2022 1 NaN | 0.7663 | NaN | 1.5186 | . 2 NaN | 0.5826 | NaN | 1.0311 | . 3 NaN | 1.6447 | NaN | 3.6043 | . 4 NaN | 0.3832 | NaN | 0.6781 | . 2023 1 NaN | 0.5909 | NaN | 0.2813 | . 2 NaN | 0.3902 | NaN | 0.4599 | . 3 NaN | 0.3902 | NaN | 0.4599 | . 4 NaN | 0.3919 | NaN | 0.2803 | . 2024 1 NaN | 0.5796 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . SA 2021 2 1.0620 | 3.4077 | 2.0807 | 0.8059 | . 3 NaN | 0.6955 | 0.6889 | 0.0000 | . 4 NaN | 0.8202 | NaN | 0.0000 | . 2022 1 NaN | 0.4253 | NaN | 0.0000 | . 2 NaN | 0.7376 | NaN | 0.6322 | . 3 NaN | 0.6142 | NaN | 0.0000 | . 4 NaN | 0.5910 | NaN | 0.1892 | . 2023 1 NaN | 0.3054 | NaN | 0.1165 | . 2 NaN | 0.3844 | NaN | 0.4446 | . 3 NaN | 0.3844 | NaN | 0.4446 | . 4 NaN | 0.2357 | NaN | 0.4446 | . 2024 1 NaN | 0.2735 | NaN | 0.1165 | . 2 NaN | 0.4974 | NaN | 0.9249 | . 3 NaN | 0.4974 | NaN | 0.9249 | . 4 NaN | 0.1982 | NaN | 0.4172 | . 2025 1 NaN | 0.3231 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . VIC 2021 2 1.5429 | 5.0785 | 3.0535 | 1.2225 | . 3 NaN | 1.5175 | 1.0261 | 0.6760 | . 4 NaN | 0.3633 | NaN | 0.0000 | . 2022 1 NaN | 0.3302 | NaN | 0.1681 | . 2 NaN | 0.7957 | NaN | 0.2488 | . 3 NaN | 0.5942 | NaN | 0.0690 | . 4 NaN | 0.2390 | NaN | 0.0707 | . 2023 1 NaN | 0.2669 | NaN | 0.0000 | . 2 NaN | 0.5916 | NaN | 0.0000 | . 3 NaN | 0.3004 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2024 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . 3 NaN | 0.0000 | NaN | 0.0000 | . 4 NaN | 0.0000 | NaN | 0.0000 | . 2025 1 NaN | 0.0000 | NaN | 0.0000 | . 2 NaN | 0.0000 | NaN | 0.0000 | . Strips . strips_pivot = pd.pivot_table(raw_strips, index=[&quot;state&quot;, &quot;year&quot;,&quot;prod_type&quot;]) strips_pivot = strips_pivot.iloc[:,1:] strips_pivot . annual monthly qtrly quater weekly . state year prod_type . NSW 2022 Cal 0.1463 | 0.1260 | 0.1699 | 4 | 0.1924 | . Fin 0.1703 | 0.2046 | 0.2056 | 2 | 0.3638 | . 2023 Cal 0.1523 | 0.1217 | 0.1658 | 4 | 0.1918 | . Fin 0.1360 | 0.1279 | 0.1653 | 2 | 0.1774 | . 2024 Cal NaN | 0.0741 | 0.0973 | 4 | 0.1028 | . Fin NaN | 0.0870 | 0.1390 | 2 | 0.1214 | . 2025 Fin NaN | 0.0862 | NaN | 2 | 0.0248 | . QLD 2022 Cal 0.1541 | 0.2138 | 0.1997 | 4 | 0.3788 | . Fin 0.1807 | 0.3001 | 0.2384 | 2 | 0.5839 | . 2023 Cal 0.1570 | 0.1554 | 0.1926 | 4 | 0.3159 | . Fin 0.1438 | 0.1367 | 0.1777 | 2 | 0.2404 | . 2024 Cal NaN | 0.1048 | 0.1402 | 4 | 0.0356 | . Fin NaN | 0.0841 | 0.1412 | 2 | 0.1357 | . SA 2022 Cal 0.1464 | 0.1455 | 0.1733 | 4 | 0.0426 | . Fin 0.1393 | 0.1374 | 0.1679 | 2 | 0.0893 | . 2023 Cal 0.2139 | 0.2260 | 0.2356 | 4 | 0.0996 | . Fin 0.1530 | 0.1452 | 0.1925 | 2 | 0.0274 | . 2024 Cal NaN | 0.1023 | 0.2016 | 4 | 0.1041 | . Fin NaN | 0.2115 | 0.2188 | 2 | 0.1907 | . 2025 Fin NaN | 0.0499 | NaN | 2 | 0.0000 | . VIC 2022 Cal 0.2050 | 0.1535 | 0.2802 | 4 | 0.1907 | . Fin 0.2123 | 0.1784 | 0.2734 | 2 | 0.2058 | . 2023 Cal 0.1635 | 0.1090 | 0.2421 | 4 | 0.1391 | . Fin 0.1666 | 0.1233 | 0.2379 | 2 | 0.1619 | . 2024 Cal NaN | 0.1540 | 0.2027 | 4 | 0.0640 | . Fin NaN | 0.1134 | 0.2104 | 2 | 0.0758 | . 2025 Fin NaN | 0.2690 | NaN | 2 | 0.0207 | .",
            "url": "https://samcurtis111.github.io/attunga/jupyter/2021/06/05/Annualised-Volatilities.html",
            "relUrl": "/jupyter/2021/06/05/Annualised-Volatilities.html",
            "date": " • Jun 5, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://samcurtis111.github.io/attunga/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://samcurtis111.github.io/attunga/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://samcurtis111.github.io/attunga/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}